// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model instructor {
  id           Int      @unique @default(autoincrement())
  firstName    String
  lastName     String
  password     String
  PasswordCode String?
  isConfirmed  Boolean? @default(false)
  phone        String?
  email        String   @unique
  roles        Role     @default(Instructor)
  courses      course[]
}

enum Role {
  Admin
  Moderator
  User
  Instructor
  Student
}

model quest{
enum questionLevel{
  MEDIAM
  HARD
}}
model Exam{
  id          Int        @unique @default(autoincrement())
  name        String
  description String
  type        ExamType
  questions   question[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}


enum ExamType{
  QUIZ
  FINAL
}

model student {
  id           Int      @unique @default(autoincrement())
  firstName    String
  lastName     String
  password     String
  PasswordCode String?
  isConfirmed  Boolean? @default(false)
  phone        String?
  email        String   @unique
  roles        Role     @default(User)
  enrollments  course[]  @relation("StudentEnrollments")
  takenQuizzes quiz[]    @relation("StudentTakenQuizzes")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model course {
  id           Int        @unique @default(autoincrement())
  name         String
  description  String
  instructorId Int
  instructor   instructor @relation(fields: [instructorId], references: [id])
  imgUrl       String?
  photoUrl     String?
  videoUrl     String?

  quizzes quiz[]
}

model quiz {    
  id          Int        @unique @default(autoincrement())
  name        String
  description String
  courseId    Int
  course      course     @relation(fields: [courseId], references: [id])
  questions   question[]
}

model question {
  id       Int    @unique @default(autoincrement())
  question String
  answer   String
  quizId   Int
  quiz     quiz   @relation(fields: [quizId], references: [id])
}

model Choice {
  id        Int      @id @default(autoincrement())
  optionText String
  isCorrect Boolean
}
